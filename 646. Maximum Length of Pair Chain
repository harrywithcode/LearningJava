class Solution {
    public int findLongestChain(int[][] pairs) {
        Arrays.sort(pairs, (a, b) -> (a[1] - b[1]));

        int result = 1;
        int tail = 0;
        
        for (int i = 1; i < pairs.length; i++) {
            if (pairs[i][0] > pairs[tail][1]) {
                result++;
                tail = i;
            } else {
                continue;
            }
        }
        return result;
    }
}
//////////////////////

class Solution {
    public int findLongestChain(int[][] pairs) {
        Arrays.sort(pairs, (a, b) -> (a[1] - b[1]));

        int result = 0;
        int[] dp = new int[pairs.length];
        
        for (int i = 0; i < pairs.length; i++) {
            dp[i] = 1;
        }
        for (int i = 0; i < pairs.length - 1; i++) {
            for (int j = i + 1; j < pairs.length; j++) {
                if (pairs[j][0] > pairs[i][1] && dp[j] < dp[i] + 1) { 原尾巴没有更新以后的尾巴长，于是将原尾巴更新
                    dp[j] = dp[i] + 1; // j是数字串的尾巴
                }
            }
        }
        for (int i = 0; i < pairs.length; i++) {
            if (result < dp[i]) {
                result = dp[i];
            }
        }
        return result;
    }
}

//////////

class Solution {
    public int findLongestChain(int[][] pairs) {
        Arrays.sort(pairs, (a, b) -> a[1] - b[1]);
        
        int result = 0;
        for (int i = 0; i < pairs.length; i++) {
            result++;
            int current = i;
            while (i < pairs.length - 1 && pairs[i + 1][0] <= pairs[current][1]) {
                i++;
            }
        }
        return result;
    }
}
