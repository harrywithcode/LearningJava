class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map = new HashMap<>();
        for (String word : words) {
            if (map.containsKey(word)) {
                map.put(word, map.get(word) + 1);
            } else {
                map.put(word, 1);
            }
        }
        
        PriorityQueue<Map.Entry<String, Integer>> queue = new PriorityQueue<>(new Comparator<Map.Entry<String, Integer>>(){
            @Override
            public int compare(Map.Entry<String, Integer> e1, Map.Entry<String, Integer> e2) {
                if (e1.getValue() > e2.getValue()) {
                    return -1;
                } else if (e1.getValue() == e2.getValue()) {
                    return e1.getKey().compareTo(e2.getKey());
                } else {
                    return 1;
                }
            }
        });
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            queue.offer(entry);
        }
        
        List<String> result = new ArrayList<>();
        
        int i = 1;
        while (!queue.isEmpty()) {
            Map.Entry<String, Integer> entry = queue.poll();
            String key = entry.getKey();
            int value = entry.getValue();
            
            result.add(key);
            if (i == k) {
                break;
            }
            i++;
        }
        return result;
    }
}
