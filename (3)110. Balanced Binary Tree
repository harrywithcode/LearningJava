/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        return height(root) != -1;
    }
    
    private int height(TreeNode node){
        if(node == null){
            return 0;
        }
        int left_height = height(node.left);
        if(left_height == -1){
            return -1;
        }
        int right_height = height(node.right);
        if(right_height == -1){
            return -1;
        }
        if(left_height - right_height < -1 || left_height - right_height > 1){
            return -1;
        }
        return Math.max(left_height, right_height) + 1;
    }
}


///////
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
            if(root == null) return true;
            if(Math.abs(getH(root.left) - getH(root.right)) > 1) return false;
            else return isBalanced(root.left) && isBalanced(root.right);
        }

        private int getH(TreeNode root) {
            if(root == null) return 0;//base case
            int leftH = getH(root.left);
            int rightH = getH(root.right);
            return Math.max(leftH, rightH)+1;
        }
}
