//recursion就不写了
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
    ArrayList<Integer> result = new ArrayList<Integer>();
	if (root==null){
		return result;
	}
	Stack<TreeNode> stack = new Stack<TreeNode>();
	while(!stack.isEmpty()||root!=null){
		if(root!=null){
			stack.push(root);
			root=root.left;
		}
		else{
			root=stack.pop();
			result.add(root.val);
			root=root.right;
		}
	}
	return result;
	}
}

//第二种方法，依然不懂
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
public List<Integer> inorderTraversal(TreeNode root) {
// Morris, O(n) time, O(1) space

     ArrayList<Integer> mylist = new ArrayList<Integer>();
     TreeNode current, predec;
     current = root;
     while(current!=null){
         // find predecessor
         if(current.left != null){
             predec = current.left;
             while(predec.right!=null && predec.right!=current){
                 predec = predec.right;
             }
             if(predec.right == null){ //need build trace
                 predec.right = current;
                 current = current.left;
             } else {
                 mylist.add(current.val); //current is obtained from predec, now delete predec and move to right side
                 current = current.right;
                 predec.right = null;
             }
         }
		 else {
             mylist.add(current.val);
             current = current.right;
         }
     }
     return mylist;
}
}
