class Solution {
    public int longestPalindrome(String s) {
        boolean[] array = new boolean[128];
        int result = 0;
        for (char c : s.toCharArray()) {
            array[c] = !array[c]; //Here you put char into array[], char will cover to index automatically. 'a' = 61
            if (array[c] == false) {
                result += 2;
            }
        }
        if (result < s.length()) {
            result++;
        }
        return result;
    }
}

////////Slower/////////////

class Solution {
    public int longestPalindrome(String s) {
        char[] letters = s.toCharArray();
        Map<Character, Integer> map = new HashMap<>();
        int result = 0;
        
        for (char c : letters) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int count = 0;
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            if (entry.getValue() % 2 == 0) {
                result += entry.getValue();
            }
            if (entry.getValue() % 2 == 1 && entry.getValue() > 1) {
                result += entry.getValue() - 1;
                count++;
            }
            if (entry.getValue() == 1) {
                count++;
            }
        }
        if (count > 0) {
            return result + 1;
        }
        return result;
    }
}
