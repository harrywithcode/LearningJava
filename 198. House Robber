public class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(n==0) return 0;
        if(n==1) return nums[0];
        if(n<3) return Math.max(nums[0],nums[1]);
        int []result = new int[n];//n ge shu
        result[0] = nums[0];
        result[1] = Math.max(result[0],nums[1]);
        for(int i = 2; i < n; i++){
            result[i] = Math.max((nums[i]+result[i-2]),result[i-1]);//nums[i]+result[i-2]xiangdangyu digui,
                                                                    //jishu zhe zu he oushu zhe zu bijiao
        }
        return result[n-1];
    }
}
//////
public int rob(int[] num) {
    int rob = 0; //max monney can get if rob current house
    int notrob = 0; //max money can get if not rob current house
    for(int i=0; i<num.length; i++) {
        int currob = notrob + num[i]; //if rob current value, previous house must not be robbed
        notrob = Math.max(notrob, rob); //if not rob ith house, take the max value of robbed (i-1)th house and not rob (i-1)th house
        rob = currob;
    }
    return Math.max(rob, notrob);
}
