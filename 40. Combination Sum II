class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);
        backTrack(result, new ArrayList<>(), candidates, target, 0);
        return result;
    }
    private void backTrack(List<List<Integer>> result, List<Integer> line, int[] nums, int target, int start) {
        if (target < 0) {
            return;
        }
        if (target == 0) {
            result.add(new ArrayList<>(line));
            return;
        }
        for (int i =  start; i < nums.length; i++) {
            if (i > start && nums[i] == nums[i - 1]) { // because the given array nums contains duplicated data, so we need to skip
                continue; // you don't need to care about whether the result contains duplicated data. If the input contains duplicated data, then you need this if branch.
            }
            line.add(nums[i]);
            backTrack(result, line, nums, target - nums[i], i + 1); // only difference
            line.remove(line.size() - 1);
        }
    }
}
//The difference between version 1 and version 2 is that version 2 can't use duplicate data, so when call backTrack recursive, use i + 1 instead of i
