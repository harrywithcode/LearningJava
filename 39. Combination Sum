class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);
        backTrack(result, new ArrayList<>(), candidates, target, 0);
        return result;
    }
    private void backTrack(List<List<Integer>> result, List<Integer> line, int[] nums, int target, int start) {
        if (target < 0) {
            return;
        }
        if (target == 0) {
            result.add(new ArrayList<>(line));
            return;
        }
        for (int i = start; i < nums.length; i++) { //remember initial value of i to start
            //because the given array doesn't contain duplicate data, so we don't have to write the "if" branch to continue.
            line.add(nums[i]);
            backTrack(result, line, nums, target - nums[i], i); // not i + 1 because we can reuse same elements, so we don't need to move on. Use for loop to move on.
            line.remove(line.size() - 1);
        }
    }
}
