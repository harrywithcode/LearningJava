//自己亲手写的，不管快慢，自己写的
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        
        for (int i = 0; i < s.length(); i++) {
            char current = s.charAt(i);
            if (current == '(' || current == '{' || current == '[') {
                stack.push(current);
            }
            if (current == ')') {
                if (stack.isEmpty() || stack.peek() != '(') {
                    return false;
                } else {
                    stack.pop();
                }
            }
            
            if (current == '}') {
                if (stack.isEmpty() || stack.peek() != '{') {
                    return false;
                } else {
                    stack.pop();
                }
            }
            
            if (current == ']') {
                if (stack.isEmpty() || stack.peek() != '[') {
                    return false;
                } else {
                    stack.pop();
                }
            }
        }
        if (!stack.isEmpty()) {
            return false;
        } else {
            return true;
        }
    }
}

//慢

public class Solution {
    public boolean isValid(String s) {        
        
        Stack<Character> stack = new Stack<>();
        
        for (int i =0; i<s.length(); i++){
            if (s.charAt(i) == ')' && (stack.isEmpty() || stack.pop() != '(')) return false;
            if (s.charAt(i) == '}' && (stack.isEmpty() || stack.pop() != '{')) return false;
            if (s.charAt(i) == ']' && (stack.isEmpty() || stack.pop() != '[')) return false;
            if (s.charAt(i) == '{' || s.charAt(i) == '(' || s.charAt(i) == '[') stack.push(s.charAt(i));
        }
        return stack.isEmpty();
    }
}

//fast
class Solution {
    public boolean isValid(String s) {
        char[] container = new char[s.length()];
        int head = 0;
        
        for (char c : s.toCharArray()) {
            switch(c) {
                case '{':
                case '[':
                case '(':
                    container[head++] = c;
                    break;
                    
                case '}':
                    if (head == 0 || container[--head] != '{') {
                        return false;
                    }
                    break;
                case  ']':
                    if (head == 0 || container[--head] != '[') {
                        return false;
                    }
                    break;
                case ')':
                    if (head == 0 || container[--head] != '(') {
                        return false;
                    }
                    break;
            }
        }
        return head == 0;
    }
}
