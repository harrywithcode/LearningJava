/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] findFrequentTreeSum(TreeNode root) {
        Map<Integer, Integer> map = new HashMap<>();
        traverse(root, map);
        int i = 0;
        int[] result = new int[count];
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() == maxFreq) {
                result[i++] = entry.getKey();
            }
        }
        return result;
    }
    private int count = 0;
    private int maxFreq = Integer.MIN_VALUE;
    
    private int traverse(TreeNode root, Map<Integer, Integer> map) {
        if (root == null) {
            return 0;
        }
        int left = traverse(root.left, map);
        int right = traverse(root.right, map);
        int sum = left + right + root.val;
        map.put(sum, map.getOrDefault(sum, 0) + 1);
        
        if (map.get(sum) > maxFreq) {
            maxFreq = map.get(sum);
            count = 1;
        } else if (map.get(sum) == maxFreq) {
            count++;
        }
        return sum; //postorder go down to bottom, and calculate the sum, but I don't know why return sum? sum is not use for above level.
        //Maybe because sum is used to compare with maxFreq???
        //Or because sum is the value of "left" or "right"
    }
}
