public class Solution {
    public boolean isPowerOfFour(int num) {
        for(int i = 0; i < 16; i++){
            if(num==(int)Math.pow(4,i)){
                 return true;
            }
        }
        return false;
    }
}

//2222
public class Solution {
    public boolean isPowerOfFour(int num) {
        return num>0 &&(num == 1 || num%4 == 0 && isPowerOfFour(num/4));//num=1是最后4除4的时候，肯定是1，而不是0
    }
}


//还有个思路，就是1024位是1，隔一个512，然后256位是1，然后隔一个128，然后64位上面是1.这些特点位(奇数位）上是1，其他都是0，就满足条件
//0x55555555 = 1010101010101010101010101010101（奇数位为1，以1位为单位提取奇偶位） 

//这个是不用循环做的，那个0X55.。。我没看懂
public boolean isPowerOfFour(int num) {
        return num > 0 && (num&(num-1)) == 0 && (num & 0x55555555) != 0;
        //0x55555555 is to get rid of those power of 2 but not power of 4
        //so that the single 1 bit always appears at the odd position 
    }
  /*First,greater than 0.Second,only have one '1' bit in their binary notation,so we use x&(x-1) to delete the lowest '1',
  and if then it becomes 0,it prove that there is only one '1' bit.Third,the only '1' bit should be locate at the odd location,
  for example,16.It's binary is 00010000.So we can use '0x55555555' to check if the '1' bit is in the right place.
  With this thought we can code it out easily!*/
