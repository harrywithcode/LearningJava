//////// Two sets/////////////////
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        
        for (int i : nums1) {
            set1.add(i);
        }
        for (int i : nums2) {
            if (set1.contains(i)) {
                set2.add(i);
            }
        }
        int[] result = new int[set2.size()];
        int index = 0;
        for (Integer i : set2) {
            result[index++] = i;
        }
        return result;
    }
}

//////////// Two Pointers ///////////////
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        Set<Integer> container = new HashSet<>();
        int pointer1 = 0;
        int pointer2 = 0;
        
        while (pointer1 < nums1.length && pointer2 < nums2.length) {
            if (nums1[pointer1] < nums2[pointer2]) {
                pointer1++;
            } else if (nums1[pointer1] > nums2[pointer2]) {
                pointer2++;
            } else if (nums1[pointer1] == nums2[pointer2]) {
                container.add(nums1[pointer1]);
                pointer1++;
                pointer2++;
            }
        }
        int[] result = new int[container.size()];
        int index = 0;
        for (int i : container) {
            result[index++] = i;
        }
        return result;
    }
}

////////// Binary Search ///////////////
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Set<Integer> set = new HashSet<>();
        
        for (int i : nums2) {
            if (helper(nums1, i)) {
                set.add(i);
            }
        }
        
        int[] result = new int[set.size()];
        
        int index = 0;
        for (int i : set) {
            result[index++] = i;
        }
        return result;
    }
    private boolean helper(int[] nums, int i) {
        int start = 0;
        int end = nums.length - 1;
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] > i) {
                end = mid - 1;
            } else if (nums[mid] < i) {
                start = mid + 1;
            } else if (nums[mid] == i) {
                return true;
            }
        }
        return false;
    }
}
