// O(n). Clever but sum may too big
class Solution {
    public int missingNumber(int[] nums) {
        int length = nums.length;
        int sum = length * (length + 1) / 2;    //If all number appear as usual, this is expected sum. 
        
        for (int i = 0; i < length; i++) {
            sum -= nums[i]; // however, we lose one number, here we can find. Give example as 1,2,3,5,6
        }
        return sum;
    }
}
///// O(nlogn)
class Solution {
    public int missingNumber(int[] nums) {
        Arrays.sort(nums);
        int start = 0;
        int end = nums.length;
        
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (mid - nums[mid] != 0) {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }
}
