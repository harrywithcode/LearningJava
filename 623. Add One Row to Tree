/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode addOneRow(TreeNode root, int v, int d) {
        if (d == 1) {
            TreeNode result = new TreeNode(v);
            result.left = root;
            return result;
        }
        helper(root, v, d, 1);
        return root;
    }
    private void helper(TreeNode root, int v, int d, int currentDepth) {
        if (root == null) {
            return;
        }
        if (currentDepth == d - 1) {
            TreeNode temp = root.left;
            root.left = new TreeNode(v);
            root.left.left = temp;
            
            temp = root.right;
            root.right = new TreeNode(v);
            root.right.right = temp;
            
            return;
        }
        helper(root.left, v, d, currentDepth + 1);
        helper(root.right, v, d, currentDepth + 1);
    }
}

//////////////////////////////////////////////

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode addOneRow(TreeNode root, int v, int d) {
        if (d == 0) {
            return null;
        }
        if (d == 1) {
            TreeNode result = new TreeNode(v);
            result.left = root;
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        for (int i = 1; i < d - 1; i++) {
            int size = queue.size();
            for (int j = 0; j < size; j++) {
                TreeNode t = queue.poll();
                if (t.left != null) {
                    queue.add(t.left); // one more level, now level is d - 1
                }
                if (t.right != null) {
                    queue.add(t.right);
                }
            }
        }
        //Now the queue contains all nodes that on level of d - 1
        while (!queue.isEmpty()) {
            TreeNode t = queue.poll();
            TreeNode temp = t.left;
            t.left = new TreeNode(v);
            t.left.left = temp;
            
            temp = t.right;
            t.right = new TreeNode(v);
            t.right.right = temp;
        }
        return root;
    }
}
