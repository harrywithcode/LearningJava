public class Solution {
    public List<String> letterCombinations(String digits) {
        //把table上的数字对应的字母列出来，当输入为2是，digits[2]就是2所对应的"abc"
        String[] table = new String[]{"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        List<String> result = new ArrayList<String>();
        //index从0开始，即digits的第一个数字
        letterCombinations(result,digits,"",0,table);
        return result;
    }
    
    private void letterCombinations (List<String> result, String digits, 
                                    String current, int index,String[] table) {
        //最后一层退出条件
        if (index == digits.length()) {
            if(current.length() != 0) {
                result.add(current);
            }
            return;
        }
        
        //找到数字对应的字符串
        String temp = table[digits.charAt(index) - '0'];
        for (int i = 0; i < temp.length(); i++) {
            //每次循环把不同字符串加到当前curr之后
            String next = current + temp.charAt(i);
            //进入下一层
            letterCombinations(result,digits,next,index+1,table);
        }
    }
}

///////////////////////////////////////
class Solution {
    public List<String> letterCombinations(String digits) {
        if (digits.length() == 0) {
            return new ArrayList<>();
        }
        LinkedList<String> result = new LinkedList<String>();
        String[] table = new String[] {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        result.add("");
        
        for (int i = 0; i < digits.length(); i++) {
            int pushedButton = Character.getNumericValue(digits.charAt(i)); // Which button you pushed
            while (result.peek().length() == i) {    //If you push 2 buttons totally, every item in result should has 2 letters.
                                                    //Every time peek from head, until peek all old items and peek the first new update item
                String old = result.remove();       //remove old one from head
                for (char c : table[pushedButton].toCharArray()) {
                    result.add(old + c);        //add to tail
                }
            }
        }
        return result;
    }
}
