class Solution {
    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s);
        
        int result = 0;
        
        for (int i = 0; i < s.length && result < g.length; i++) {
            if (g[result] <= s[i]) {
                result++;
            }
        }
        return result;
    }
}

//////////Easier to understand//////////////
public class Solution {
    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s);
        
        int pointG = 0;
        int pointS = 0;
        
        while (pointG<g.length && pointS<s.length) {
            if (g[pointG]<=s[pointS]) {
                pointG++;
                pointS++;
            } else {
                pointS++;
            }
        }
        
        return pointG;
    }
}

//////////////Original slower///////////////////////////

class Solution {
    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s); //sorted array contains much more information, use it.
        
        int result = 0;
        
        for (int i = 0; i < g.length; i++) {
            if (i > s.length) {
                return result;
            }
            for (int j = 0; j < s.length; j++) { //You don't need to begin from 0 every time.
                if (s[j] >= g[i]) {
                    result++;
                    s[j] = 0; //You don't need this operation cause s[j] is already passed and will never visit again.
                    break;
                }
            }
        }
        return result;
    }
}
