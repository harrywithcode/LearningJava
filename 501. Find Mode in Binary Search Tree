/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private int currentVal = 0;
    private int currentCount = 0;
    private int maxCount = 0;
    private int modeCount = 0;
    private int[] result;
    
    public int[] findMode(TreeNode root) {
        inorder(root);
        result = new int[modeCount];
        modeCount = 0;
        currentCount = 0;
        inorder(root);
        return result;
    }
    private void inorder(TreeNode root) {
        if (root == null) {
            return;
        }
        inorder(root.left);
        helper(root.val);
        inorder(root.right);
    }
    private void helper(int val) {
        if (val != currentVal) {
            currentVal = val;
            currentCount = 0;
        }
        currentCount++;
        if (currentCount > maxCount) {
            maxCount = currentCount; //First time in-order traverse gets maxCount
            modeCount = 1;
        } else if (currentCount == maxCount) { //First time the elements will not put into result[] because we have not initialize result[], we will put real elements in second time traverse, because the second time we get real maxCount. So the second time traverse will only enter this branch, the above branch will not enter anymore.
            if (result != null) { //because of this line, the first time inorder traverse will not visit this branch.
                result[modeCount] = currentVal;
            }
            modeCount++;
        }
    }
}
