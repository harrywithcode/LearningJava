//recursion
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        if(root == null){
            return result;
        }
        result.add(root.val);
        result.addAll(preorderTraversal(root.left));
        result.addAll(preorderTraversal(root.right));
        return result;
    }
}


//Morris，实在看不懂
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> results = new ArrayList<>();
        TreeNode current = root;
        while (current != null) {
            if (current.left == null) {
                results.add(current.val);
                current = current.right;
            } 
			else {
                TreeNode temp = current.left;
                while (temp.right != null && temp.right != current) {
                    temp = temp.right;
                }
                if (temp.right == null) {
                    results.add(current.val);
                    temp.right = current;
                    current = current.left;
                } 
				else {
                    temp.right = null;
                    current = current.right;
                }
            }
        }
        return results;
    }
}

//Iterative1
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> result = new ArrayList<Integer>();
    if(root==null) return result;
    Stack<TreeNode> stack=new Stack<TreeNode>();
    while(!stack.isEmpty()||root!=null){
        if(root!=null){
            result.add(root.val);
            stack.push(root);
            root=root.left;
        }else{
            root=stack.pop();
            root=root.right;
        }
    }
    return result;
	}
}

//stack 2
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> result=new ArrayList<Integer>();
    if(root==null) return result;
    Stack<TreeNode> stack=new Stack<TreeNode>();
    stack.push(root);
    while(!stack.isEmpty()){
        root=stack.pop();
        result.add(root.val);
        if(root.right!=null) stack.push(root.right);
        if(root.left!=null) stack.push(root.left);
    }
    return result;
    }
}
