/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
       if(root.val < p.val && root.val < q.val){
           root = lowestCommonAncestor(root.right, p, q);
       }
       else if (root.val > p.val && root.val > q.val){
           root = lowestCommonAncestor(root.left, p, q);
       }
       return root;
        
    }
}

//Common Ancestor must be in the middle of these two nodes(p and q), so if Common Ancestor bigger than both or smaller than both
//it is wrong. Also, the importance for me is make sure that root is on the top of the whole tree, and we move the root down.
//So if you want to use a special number as an example, make sure you will reach its parent first.
