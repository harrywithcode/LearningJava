class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length == 0) {
            return 0;
        }
        int result = 0;
        int bottom = prices[0];
        int peak = prices[0];
        int i = 0;
        
        while (i < prices.length) {
            while (i < prices.length - 1 && prices[i + 1] <= prices[i]) {
                i++;
            }
            bottom = prices[i];
            
            while (i < prices.length - 1 && prices[i + 1] >= prices[i]) {
                i++;
            }
            
            peak = prices[i];
            
            result += peak - bottom;
            i++;    //避免array里只有一个数的情况，这样的话，就会跳不出最外面的while
        }
        return result;
    }
}

//////////////////////////////////////////////
class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length == 0) {
            return 0;
        }
        
        int valley = prices[0];
        int peak = prices[0];
        int maxProfit = 0;
        int i = 0;
        
        while (i < prices.length - 1) {
            while (i < prices.length - 1 && prices[i + 1] <= prices[i]) {
                i++;
            }
            valley = prices[i];
            while (i < prices.length - 1 && prices[i + 1] >= prices[i]) {
                i++;
            }
            peak = prices[i];
            
            maxProfit += peak - valley;
        }
        return maxProfit;
    }
}
