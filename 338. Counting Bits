//An easy recurrence for this problem is f[i] = f[i / 2] + i % 2.

public int[] countBits(int num) {
    int[] f = new int[num + 1];
    for (int i=1; i<=num; i++) f[i] = f[i >> 1] + (i & 1);
    return f;
}
//或者写成
public class Solution {
    public int[] countBits(int num) {
        int[] result = new int[num+1];
        for (int i = 1; i <= num; i++){
            result[i] = result[i/2] + i%2;//只需要在这里把i/2替换成i>>1就可以了，其他的全部不变
        }
        return result;
    }
}

//第二种思路
[1] 1
[2-3] 1, 2
[4-7] 1, 2, 2, 3
[8-15] 1, 2, 2, 3 | 2, 3, 3, 4
[16-31]	1, 2, 2, 3 2, 3, 3, 4 | 2, 3, 3, 4 3, 4, 4, 5
[32-63]	1, 2, 2, 3 2, 3, 3, 4 2, 3, 3, 4 3, 4, 4, 5	| 2, 3, 3, 4 3, 4, 4, 5 3, 4, 4, 5 4, 5, 5, 6
First half is the same as the previous one, the other half is generated by adding 1 to each in the first half.

class Solution(object):
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
        ret = [0 for i in xrange(0, num + 1)]
        nextBS = 1
        for i in xrange(1, num + 1):
            if i == nextBS:
                ret[i] = 1
                nextBS *= 2
            else:
                if i < nextBS / 2 + (nextBS) / 4:
                    ret[i] = ret[i - nextBS / 4]
                else:
                    ret[i] = ret[i - nextBS / 4] + 1
        return ret
