class Solution {
    public int rob(int[] nums) {
        if (nums.length == 1) {
            return nums[0];
        }
        return Math.max(robVersion1(nums, 0, nums.length - 2), robVersion1(nums, 1, nums.length - 1));
        //break the circle by assuming a house is not robbed. For example, 1 -> 2 -> 3 -> 1 becomes 2 -> 3 if 1 is not robbed.
    }
    private int robVersion1(int[] num, int low, int high) {
        int rob = 0; //max monney can get if rob current house
        int notrob = 0; //max money can get if not rob current house
        
        for(int i = low; i <= high; i++) {
            int currob = notrob + num[i]; //if rob current value, previous house must not be robbed
            notrob = Math.max(notrob, rob); //if not rob ith house, take the max value of robbed (i-1)th house and not rob (i-1)th house
            rob = currob;
        }
        return Math.max(rob, notrob);
    }
}
