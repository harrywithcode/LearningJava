class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        
        helper(result, new ArrayList<Integer>(), k, n, 1);
        return result;
    }
    private void helper(List<List<Integer>> result, List<Integer> combine, int k, int n, int start) {
        if (combine.size() == k && n == 0) {
            List<Integer> temp = new ArrayList<Integer>(combine);
            result.add(temp);
            return;
        }
        if (n > 0) {
            for (int i = start; i <=9; i++) {
                combine.add(i); 
                helper(result, combine, k, n - i, i + 1);
                combine.remove(combine.size() - 1); //why
            }
        } else {
            return;
        }
    }
}

//////////////////
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        //we don't have to sort because there is no given array.
        helper(result, new ArrayList<Integer>(), k, n, 1);
        return result;
    }
    private void helper(List<List<Integer>> result, List<Integer> combine, int k, int n, int start) {
        if (combine.size() == k && n == 0) { //happy case
            List<Integer> temp = new ArrayList<Integer>(combine);
            result.add(temp);
            return;
        }
        
        for (int i = start; i <=9; i++) { //用for loop的时候，就表示back tracking，虽然我们之前remove了一个数，但是后面我们还要回头找他，这个“回头”就是back tracking。
            combine.add(i); //先全都加进去，加到9
            helper(result, combine, k, n - i, i + 1);
            combine.remove(combine.size() - 1); //一个一个删，9删完了删8, 8删完了要回头找9，看1-7 + 9的组合满足不满足
        }
        return;
    }
}
//第一步，1加到9
//第二步，删9，删8，进入到一个新的helper分支中，在这个分支中进行第三步
//第三步，加9
//第四步，因为加到9了，新分支错过if 和 for，达到return，新分支return回刚才，把新加的9删掉了，删掉后扔无法留在for 中，又抵达return
//第五步，删7，发现还能在for中，加8，加9，此时又进入到一个新的分支中.1-6 + 8,路过一次if，1-6+8+9路过一次if
