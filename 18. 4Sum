class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums.length < 4) {
            return result;
        }
        Arrays.sort(nums);
        
        for (int i = 0; i < nums.length - 3; i++) { //i is the first number
            if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) { //our pointer(based on first number) is larger(pass) than target, stop searching.
                break;
            }
            if (nums[i] + nums[nums.length - 1] + nums[nums.length - 2] + nums[nums.length - 3] < target) {
                continue; //first candidate is too small.
            }
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue; // this value is already visited, skip to avoid duplicated value.
            }
            for (int j = i + 1; j < nums.length - 2; j++) { // j is the second number, at this time, you can think i is a fixed number and we only focus on j.
                if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {
                    break; // our pointer based on second number is passed the target, stop searching.
                }
                if (nums[i] + nums[j] + nums[nums.length - 1] + nums[nums.length - 2] < target) { //j is too small
                    continue;
                }
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                //After handle first number and second number with all possible, let's use two pointer for the third and forth one.
                int low = j + 1;
                int high = nums.length - 1;
                
                while (low < high) {
                    int sum = nums[i] + nums[j] + nums[low] + nums[high];
                    if (sum == target) {
                        result.add(Arrays.asList(nums[i], nums[j], nums[low], nums[high]));
                        while (low < high && nums[low] == nums[low + 1]) {
                            low++; // skip duplicated value.
                        }
                        while (low < high && nums[high] == nums[high - 1]) {
                            high--;
                        }
                        low++;
                        high--; // we reach to the side, and now we need one more step to meet new value.
                    } else if (sum < target) {
                        low++;
                    } else {
                        high--;
                    }
                }
            }
        }
        return result;
    }
}
